<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mach.Wpf.Mvvm</name>
    </assembly>
    <members>
        <member name="T:Mach.Wpf.Mvvm.DelegateCommand">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Mach.Wpf.Mvvm.DelegateCommand.Execute(System.Object)"/> and <see cref="M:Mach.Wpf.Mvvm.DelegateCommand.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="T:Mach.Wpf.Mvvm.DelegateCommand.ICommandOnCanExecute">
            <summary>
            Delegate when CanExecute is called on the command. This can be null.
            </summary>
            <param name="parameter">Data used by the command.</param>
            <returns></returns>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of <see cref="T:Mach.Wpf.Mvvm.DelegateCommand"/> class.
            </summary>
            <param name="action">Delegate to execute when Execute is called on the command.</param>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand.#ctor(System.Action,Mach.Wpf.Mvvm.DelegateCommand.ICommandOnCanExecute)">
            <summary>
            Initializes a new instance of <see cref="T:Mach.Wpf.Mvvm.DelegateCommand"/> class.
            </summary>
            <param name="action">Delegate to execute when Execute is called on the command.</param>
            <param name="canExecute">Delegate to execute when CanExecute is called on the command. This can be null.</param>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="E:Mach.Wpf.Mvvm.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Fires <see cref="E:Mach.Wpf.Mvvm.DelegateCommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="T:Mach.Wpf.Mvvm.DelegateCommand`1">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Mach.Wpf.Mvvm.DelegateCommand`1.Execute(`0)"/> and <see cref="M:Mach.Wpf.Mvvm.DelegateCommand`1.CanExecute(`0)"/>.
            </summary>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Mach.Wpf.Mvvm.DelegateCommand`1"/> class.
            </summary>
            <param name="action">Delegate to execute when Execute is called on the command.</param>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Mach.Wpf.Mvvm.DelegateCommand`1"/> class.
            </summary>
            <param name="action">Delegate to execute when Execute is called on the command.</param>
            <param name="canExecute">Delegate to execute when CanExecute is called on the command. This can be null.</param>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.</param>
            <returns><c>true</c> if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand`1.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="E:Mach.Wpf.Mvvm.DelegateCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Mach.Wpf.Mvvm.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            Fires <see cref="E:Mach.Wpf.Mvvm.DelegateCommand`1.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="T:Mach.Wpf.Mvvm.IFileDialogService">
            <summary>
            Provides abstraction for File picker dialog.
            </summary>
        </member>
        <member name="P:Mach.Wpf.Mvvm.IFileDialogService.Multiselect">
            <summary>
            Gets or sets an option indicating whether OpenFileDialog allows users to select multiple files.
            </summary>
            <returns>true if multiple selections are allowed; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Mach.Wpf.Mvvm.IFileDialogService.FileName">
            <summary>
            Gets a string containing the full path of the file selected in a file dialog. 
            </summary>
            <returns>A String that is the full path of the file selected in the file dialog. The default is Empty.</returns>
        </member>
        <member name="P:Mach.Wpf.Mvvm.IFileDialogService.FileNames">
            <summary>
            Gets an array that contains one file name for each selected file.
            </summary>
            <returns>An array of String that contains one file name for each selected file. The default is an array with a single item whose value is Empty.</returns>
        </member>
        <member name="P:Mach.Wpf.Mvvm.IFileDialogService.FilterIndex">
            <summary>
            Gets or sets the index of the filter currently selected in a file dialog.
            </summary>
            <returns>The index of the selected filter. The default is 1.</returns>
        </member>
        <member name="M:Mach.Wpf.Mvvm.IFileDialogService.SaveFileDialog">
            <summary>
            Displays a save file dialog.
            </summary>
            <returns>If the user clicks the OK button of the SaveFileDialog that is displayed true is returned; otherwise, false.</returns>
        </member>
        <member name="M:Mach.Wpf.Mvvm.IFileDialogService.OpenFileDialog">
            <summary>
            Displays a open file dialog.
            </summary>
            <returns>If the user clicks the OK button of the OpenFileDialog that is displayed true is returned; otherwise, false.</returns>
        </member>
        <member name="T:Mach.Wpf.Mvvm.NotifyPropertyBase">
            <summary>
            Base class that implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="E:Mach.Wpf.Mvvm.NotifyPropertyBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Mach.Wpf.Mvvm.NotifyPropertyBase.OnPropertyChanged(System.String)">
            <summary>
            Fires <see cref="E:Mach.Wpf.Mvvm.NotifyPropertyBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
    </members>
</doc>
